1-使用 vue init webpack projectName 搭建的项目有.postcssrc.js文件
2-npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S   
3-配置.postcssrc.js文件
module.exports = {
    	"plugins": {
        		"postcss-import": {},
        		"postcss-url": {},
        		"postcss-aspect-ratio-mini": {},    			//处理元素容器的宽高比
        		"postcss-write-svg": {				//处理移动端1px的解决方案
            			utf8: false
        		},
        		"postcss-cssnext": {},  				// 使用css未来特性，做兼容处理
        		"postcss-px-to-viewport": {				// px转vm、vh、vmin、vmax
            			viewportWidth: 750,      			// 与设计稿对应的视窗宽度（一般为750）
            			viewportHeight: 1334,    			// 与设计稿对应的视窗高度（可使用默认值，忽略此配置）
            			unitPrecision: 3,       				// 在进行px转换时的保留小数位
            			viewportUnit: 'vw',     			// 转换为那种尺寸单位
            			selectorBlackList: ['.ignore', '.hairlines'],  		// 忽略转换的类标识
            			minPixelValue: 1,       			// 转换的临界px
            			mediaQuery: false       			// 是否在媒体查询中开启转换
        		}, 
        		"postcss-viewport-units":{},				//给CSS的属性添加content的属性，配合viewport-units-buggyfill库给vw、vh、vmin和vmax做适配的操作
        		"cssnano": {   					// 压缩清理css
            			preset: "advanced",  				// 安装preset-advance
            			autoprefixer: false,				// 指定为false将禁用cssnano中的相应插件能力
            			"postcss-zindex": false
        		}
    	}
}
4-npm i cssnano-preset-advanced --save-dev
5-重新跑项目
6-使用的注意点	
	对于想忽略转换的类，使用selectorBlackList定义的类名
	给元素指定宽高比，使用aspectratio属性
7-兼容处理
	viewport-units-buggyfill
