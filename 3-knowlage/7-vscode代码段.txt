{
	// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"http": {
		"prefix": "my-axios",
		"body": [
			"async getData(){",
				"\tlet {data:res} = await this.\\$axios.${1|get,post|}($2)",
				"\t\tif(res.${3:response}==${4|'ok','OK'|}){\n\t\t$5\n}",
				"\t$5",
			"}",
		],
		"description": "axios调用接口"
	},
	"vueTemplate":{
		"prefix": "vue-template",
		"body":[
			"<template>\n\t<div class='$1'></div>\n</template>",
			"<script>\n\texport default {\n\t name:'$2',\n data(){\n      return{}\n  }}\n</script>",
			"<style lang='less' scoped>\n$3\n</style>"
		],
		"description": "生成vue模板"
	},
	"forFn":{
		"prefix": "my-for",
		"body": [
			"for(let i = 0 ; i < ${1:arr}.length;i++){\n\t$2\n}",
		],
		"description": "生成for循环"
	},
	"switchFn":{
		"prefix": "my-switch",
		"body": [
			"switch($1){",
			"\tcase ${2:1}:",
			"\t\tbreak;",
			"\tcase ${4:2}:",
			"\t\tbreak;",
			"\tdefault:",
			"\t\treturn false",
			"}"
		],
		"description": "生成switch"
	},
	"openNewPage":{
		"prefix": "my-open-new-page",
		"body": [
			"let routeData = this.$router.resolve({",
				"\tname:'$1',",
				"\tquery: {",
				  "\t\t$2: $3,",
				  "\t\t$4: $5",
				"\t}",
			  "})",
			"window.open(routeData.href,'_blank')"
		],
		"description": "在新窗口打开"

	},
	"import":{
		"prefix": "my-import",
		"body": [
			"import ${1| ,{mapState},{eventBus}|} from '${2| ,vuex|}'"
		],
		"description": "引入文件"
	},
	"v-for":{
		"prefix": "vue-v-for",
		"body": [
			"v-for='(v,i) in $1' :key='i'"
		],
		"description": "v-for指令"
	},
	"@click":{
		"prefix": "vue-@click",
		"body":[
			"@$1='$2'"
		],
		"description": "click指令"
	},
	"killIe":{
		"prefix": "browser-ie-btn-close",
		"body":[
			"input::-ms-clear { display: none; }"
		],
		"description": "屏蔽ie在input上呈现的关闭按钮"
	},
	"killPlaceholder":{
		"prefix": "browser-input-placeholder",
		"body":[
			"input::-webkit-input-placeholder {",
				"\tcolor: #$1 !important",
			"}",
			"input::-moz-input-placeholder {",
				"\tcolor: #$1 !important",
			"}",
			"input::-ms-input-placeholder {",
				"\tcolor: #$1 !important",
			"}"
		],
		"description": "重置input的placeholde时的样式"
	},
	"changeInputCaret":{
		"prefix": "browser-input-caret",
		"body":[
			"caret-color:#$1"
		],
		"description": "改变input的光标颜色"
	},
	"routerErr":{
		"prefix": "vue-router-repeat-err",
		"body":[
			"const originalPush = Router.prototype.push",
			"Router.prototype.push = function push(location) {",
				"\treturn originalPush.call(this, location).catch(err => err)",
			"}"
		],
		"description": "解决vue路由重复时的报错问题"
	},
	"routerPush":{
		"prefix": "vue-router-push",
		"body": [
			"this.\\$router.push({",
				"\tname:'$1',",
				"\t${2|query,params|}:{",
					"\t\t${3:id}:'$4'",
				"\t}",
			"})"
		],
		"description": "vue编程式导航"
	},
	"checkObj":{
		"prefix": "my-check-obj-is-null",
		"body":[
			"Object.${1|keys,values,entries|}($2).${3|length,foreach|}",
		],
		"description": "检查对象是否为空"
	},
	"storeMutations":{
		"prefix": "vue-mutations",
		"body": [
			"${1:yourMutationName}(state,payload){",
				"\tstate.${2:changeState} = typeof payload == 'undefined' ? '':payload",
			"},"
		],
		"description": "生成mutations"
	},
	"mapState":{
		"prefix": "vue-mapState",
		"body": [
			"...mapState({",
				"\t${1:selfName}:state=>state.${2:pageName}.${3:stateName}",
			"})"
		],
		"description": "mapState"
	},
	"linkStore":{
		"prefix": "vue-store-link",
		"body":[
			"this.\\$store.${1|commit,dispatch|}('$2')"
		],
		"description": "使用commit或者dispatch操作store"
	},
	"deepWatch":{
		"prefix": "vue-deep-watch",
		"body": [
			"${1:willWatchName}{",
				"\thandler(new,old){$2},",
				"\tdeep:true",
				"\timmediate：${3|false,true|}",
			"}"
		],
		"description": "深度监听"
	},
	"checkUserSeeing":{
		"prefix": "my-check-user-seeing",
		"body": [
			"document.addEventListener('visibilitychange', () => {",
				"\tif (!document.hidden) {",
					"\t$1",
				"}",
			"})"
		],
		"description": "当用户查看某页面时"
	},
	"cssBg":{
		"prefix": "css-require-bg",
		"body": [
			".bg(@url){",
				"\tbackground: url(@url) no-repeat;",
				"\tbackground-size: 100% 100%;",
			"}"
		],
		"description": "引入背景图片"
	},
	"cssCenter":{
		"prefix": "css-elems-center",
		"body": [
			".center{",
				"\tdisplay:flex;",
				"\tjustify-content: center;",
				"\talign-items: center;",
			"}"
		],
		"description": "盒子居中"
	},
	"cssPosCenter":{
		"prefix": "css-position-center",
		"body": [
			".pos{",
				"\tposition: absolute;",
				"\t${1|left,top|}:50%;",
				"\ttransform:translate${2|X,Y|}(-50%);",
			"}"
		],
		"description": "定位居中"
	},
	"cssAfter":{
		"prefix": "css-after",
		"body": [
			".${1|after,before|}(@left,@top,@right:0,@bottom:0){",
				"\tcontent:'';",
				"\tposition:absolute;",
				"\tleft:@left;",
				"\ttop:@top;",
				"\tright:@right;",
				"\tbottom:@bottom;",
			"}"
		],
		"description": "伪元素"
	},
	"cssSpan":{
		"prefix": "css-span",
		"body": [
			".span(@width,@height,@lineH:@height,@align:center){",
				"\tdisplay:inline-block;",
				"\twidth:@width;",
				"\theight:@height;",
				"\tline-height: @lineH;",
				"\ttext-align: @align;",
			"}",
		],
		"description": "span元素"
	},
	"family":{
		"prefix": "css-family",
		"body": [
			"@family:${1:SYCT}"
		],
		"description": "字体"
	},
	"pad":{
		"prefix": "css-pad",
		"body": [
			".pad(@left,@top,@right,@bottom){",
				"\tpadding-left:@left;",
				"\tpadding-top:@top;",
				"\tpadding-right:@right;",
				"\tpadding-bottom:@bottom;",
			"}"
		],
		"description": "padding"
	}
}
